
#define LOG_TAG "VideoShare"

#include <sys/resource.h>
#include <binder/IPCThreadState.h>
#include <utils/Log.h>
#include <sys/atomics.h>
#include <time.h>
#include <utils/Trace.h>
#include <cutils/properties.h>

#include "VideoShare.h"
#include <setjmp.h>

extern "C" {
	#include "jpeglib.h" 
}


#define BUFFER_SIZE 4096

namespace android {
	
//----------------------------------------------------------------------------------------------------
//socket read
int socket_read(int fd,void *buffer,int length) 
{ 
	ALOGE("vaylb-->socket_read, total size = %d",length);
	int bytes_left; 
	int bytes_read; 
	char *ptr; 
   
	bytes_left=length; 
	while(bytes_left>0) 
	{ 
   		bytes_read=read(fd,ptr,bytes_read); 
    	if(bytes_read<0) 
    	{ 
      		if(errno==EINTR) bytes_read=0; 
      		else {
				ALOGE("vay6lb-->socket_read errno = %d, bytes_left = %d",errno,bytes_left);
				return(-1);			
			} 
    	} 
    	else if(bytes_read==0) break; 

     	bytes_left-=bytes_read; 
     	ptr+=bytes_read; 
	} 
	return(length-bytes_left); 
}

//----------------------------------------------------------------------------------------------------
//JPEG deCompress

typedef struct {
 	struct jpeg_source_mgr pub; /* public fields */
 	int source_size;
 	JOCTET* source_data;
 	boolean start_of_file;
 	JOCTET buffer[BUFFER_SIZE];
}mem_source_mgr;

typedef mem_source_mgr* mem_src_ptr;

void mem_error_exit (j_common_ptr cinfo_ptr)
{
	jpeg_decompress_struct* cinfo_tmp = reinterpret_cast<jpeg_decompress_struct*>(cinfo_ptr);
	jpeg_decompress_struct& cinfo = *cinfo_tmp;
	/*
	const char* msg1 = cinfo.err->jpeg_message_table[cinfo.err->msg_code - cinfo.err->first_addon_message];
	const char* msg2 = "";
	MessageBox(NULL,msg1,NULL,MB_OK);
	if (cinfo.err->addon_message_table != NULL)
	{
	msg2 = cinfo.err->addon_message_table[cinfo.err->msg_code - cinfo.err->first_addon_message];
	MessageBox(NULL,msg2,NULL,MB_OK);
	}
	*/
	jpeg_destroy_decompress(&cinfo);
}

void init_source (j_decompress_ptr cinfo)
{
	mem_src_ptr src = (mem_src_ptr) cinfo ->src;
	src->start_of_file = TRUE; 
}

boolean fill_input_buffer (j_decompress_ptr cinfo)
{
	mem_src_ptr src = (mem_src_ptr) cinfo->src;
	size_t nbytes = 0;	
	/* Create a fake EOI marker */
	if(src->source_size > BUFFER_SIZE)
	{ nbytes = BUFFER_SIZE; }
	else
	{ 	nbytes = src->source_size; }
	
	if(nbytes <= 0)
	{ 
		if(src->start_of_file){ exit(1);}
	  	src->buffer[0] = (JOCTET) 0xFF;
	  	src->buffer[1] = (JOCTET) JPEG_EOI;
	  	nbytes = 2;
	}
	else
	{
		memcpy(src->buffer, src->source_data,nbytes);
		src->source_data += nbytes;
		src->source_size -= nbytes;
	}
	src->pub.next_input_byte = src->buffer;
	src->pub.bytes_in_buffer = nbytes;
	src->start_of_file = FALSE;
	return TRUE;
}

void skip_input_data (j_decompress_ptr cinfo, long num_bytes){
	mem_src_ptr src = (mem_src_ptr) cinfo->src;
	if (num_bytes <= src->pub.bytes_in_buffer ) 
		{
			src->pub.bytes_in_buffer -= num_bytes;
			src->pub.next_input_byte += num_bytes;
		}
	else
	{
		num_bytes -= src->pub.bytes_in_buffer;
		src->pub.bytes_in_buffer = 0;
		src->source_data += num_bytes;
		src->source_size -= num_bytes;
	}
}

void term_source (j_decompress_ptr cinfo)
{
	(void)cinfo;
}


void jpeg_mem_src (j_decompress_ptr cinfo, JOCTET * buffer, size_t bufsize)
{
	mem_src_ptr src;
	
	if (cinfo->src == NULL) 
	{   /* first time for this JPEG object? */
		cinfo->src = (struct jpeg_source_mgr *)(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT, sizeof(mem_source_mgr));
		src = (mem_src_ptr) cinfo -> src;
	}
	src = (mem_src_ptr) cinfo->src;
	src->pub.init_source = init_source;
	src->pub.fill_input_buffer = fill_input_buffer;
	src->pub.skip_input_data = skip_input_data;
	src->pub.resync_to_restart = jpeg_resync_to_restart; /* use default method */
	src->pub.term_source = term_source;
	src->pub.bytes_in_buffer = 0; // forces fill_input_buffer on first read
	src->pub.next_input_byte = NULL; // until buffer loaded
	src->source_data = buffer;
	src->source_size = bufsize;
}

struct my_error_mgr {
  struct jpeg_error_mgr pub;	/* "public" fields */

  jmp_buf setjmp_buffer;	/* for return to caller */
};

typedef struct my_error_mgr * my_error_ptr;


METHODDEF(void)
my_error_exit (j_common_ptr cinfo)
{
  /* cinfo->err really points to a my_error_mgr struct, so coerce pointer */
  my_error_ptr myerr = (my_error_ptr) cinfo->err;

  /* Always display the message. */
  /* We could postpone this until after returning, if we chose. */
  (*cinfo->err->output_message) (cinfo);

  /* Return control to the setjmp point */
  longjmp(myerr->setjmp_buffer, 1);
}



VideoShare::VideoShare(/*sp<BufferQueue> bufferQueue*/)
	:Thread(false /*canCallJava*/)
{
	ALOGE("vaylb_test-->Slave VideoShare construct.");
}

VideoShare::~VideoShare()
{
	ALOGE("vaylb_test-->Slave VideoShare destruct.");
	//mBufferQueue.clear();
	//mBufferQueue = NULL;
}


bool VideoShare::threadLoop()
{
	mServerSocketFd = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
	if(mServerSocketFd == -1){
		ALOGE("vaylb-->create socket error:%d",errno); //errno13 :    Permission denied
		return false;
	}
	mServerAddress.sin_family = AF_INET;
	mServerAddress.sin_addr.s_addr = htonl(INADDR_ANY);
	mServerAddress.sin_port = htons(12305);
	mServerAddrLen = sizeof(mServerAddress);

	status_t res = bind(mServerSocketFd,(struct sockaddr*)&mServerAddress,mServerAddrLen);
	if(res == -1){
		ALOGE("vaylb-->bind socket fd = %d, error:%d",mServerSocketFd,errno);
		close(mServerSocketFd);
		return false;
	}
	res = listen(mServerSocketFd,5);
	if(res == -1){
		ALOGE("vaylb-->listen socket error:%d",errno);
		close(mServerSocketFd);
		return false;
	}
	mClientAddrLen = sizeof(mClientAddress);
	mClientSocketFd = accept(mServerSocketFd,(struct sockaddr*)&mClientAddress,&mClientAddrLen);
	ALOGE("vaylb_test-->Slave VideoShare::threadLoop listen at port %d,port set %d ",mServerAddress.sin_port,htons(12305));
	while (!exitPending())
    {
		int receive = 0;
		read(mClientSocketFd,(void*)&receive,sizeof(receive));
		int size = ntohl(receive);
		ALOGE("vaylb-->Slave VideoShare new data receive size = %d",size);
		if(size>0){ 
			char ch = 'O';
			write(mClientSocketFd,&ch,1);
		}else continue;
		void* image = malloc(size);
		int res = socket_read(mClientSocketFd,image,size);
		ALOGE("vaylb-->Slave received Image size = %d, send size = %d",res,size);
		FILE* fp = fopen("/mnt/sdcard/testreceive.jpg","wb+");
		if(fp){
			fwrite(image,1,size,fp);
		}
		free(image);
		//close(mClientSocketFd);
    }
	//close(mClientSocketFd);
	//close(mServerSocketFd);
	ALOGE("vaylb_test-->VideoShare::threadLoop end.");
    return false;
}


status_t VideoShare::setUpReceiver(){
	ALOGE("vaylb-->Slave VideoShare setUpReceiver");
	
	
	threadLoop_run();
	//waitingDataReceived();
	return NO_ERROR;
}

void VideoShare::deCompressFromJPEG(unsigned char* src_buffer,int src_size,unsigned char** outbuf,int * dec_size){
	struct jpeg_decompress_struct cinfo;
    struct my_error_mgr jerr;
 
    JSAMPIMAGE  buffer; 
 
    cinfo.err = jpeg_std_error(&jerr.pub);
    jerr.pub.error_exit = my_error_exit;
	
	if (setjmp(jerr.setjmp_buffer)) 
    {
     
        jpeg_destroy_decompress(&cinfo);
        return ;
    }
	
    jpeg_create_decompress(&cinfo);
 
    jpeg_mem_src(&cinfo, (JOCTET*)*src_buffer,src_size);
  	jpeg_read_header(&cinfo, TRUE);
	
    cinfo.out_color_space = JCS_YCbCr;
    cinfo.raw_data_out = TRUE;
    cinfo.do_fancy_upsampling = FALSE;
 
    jpeg_start_decompress(&cinfo);
 
 
    *dec_size = cinfo.output_width * cinfo.output_height;
 
    *outbuf = (unsigned char *)malloc(*dec_size);
    if(*outbuf == NULL)
    {
         ALOGE("vaylb-->Slave: Fail to alloc memory for raw out buffer \n");
         jpeg_finish_decompress(&cinfo);
         jpeg_destroy_decompress(&cinfo);
 
         return ;      
    }
 
    JSAMPARRAY dst_buf[3];
    JSAMPROW   dst_row1[cinfo.output_height];
    JSAMPROW   dst_row2[cinfo.output_height / 2];
    JSAMPROW   dst_row3[cinfo.output_height / 2];
     
    dst_buf[0] = dst_row1;
	unsigned int i;
 
    for(i = 0; i < cinfo.output_height;i++)
    {
        dst_buf[0][i] = *outbuf + i * cinfo.output_width;
    }
 
 
    unsigned char * p_next_comp;
 
    p_next_comp = *outbuf + cinfo.output_width * cinfo.output_height;
 
    dst_buf[1] = dst_row2;
      
    for(i = 0; i < cinfo.output_height / 2;i++)
    {
        dst_buf[1][i] = p_next_comp + i * cinfo.output_width / 2;
    }
 
    dst_buf[2] = dst_row3;
      
    p_next_comp = p_next_comp + cinfo.output_width * cinfo.output_height / 4;
 
    for(i = 0; i < cinfo.output_height / 2;i++)
    {
        dst_buf[2][i] = p_next_comp + i * cinfo.output_width / 2;
    }
 
    for (i = 0; cinfo.output_scanline < cinfo.output_height;)
    {
        jpeg_read_raw_data(&cinfo, dst_buf, y_read_line);
 
        dst_buf[0] += y_read_line;
        dst_buf[1] += y_read_line / 2;
        dst_buf[2] += y_read_line / 2;
    }
 
    jpeg_finish_decompress(&cinfo);    
    jpeg_destroy_decompress(&cinfo);
    
}

/*
void VideoShare::waitingDataReceived(){
	ALOGE("vaylb-->Slave VideoShare waiting for data");
	while(1){
		char index_ch[4];
		mClientAddrLen = sizeof(mClientAddress);
		mClientSocketFd = accept(mServerSocketFd,(struct sockaddr*)&mClientAddress,&mClientAddrLen);
		read(mClientSocketFd,index_ch,sizeof(index_ch));
		int index = -1;
		memcpy(&index, index_ch, 4);
		ALOGE("vaylb-->Slave VideoShare got from client index = %d",index);
		close(mClientSocketFd);
	}
}
*/

/*
void VideoShare::signalToDataTransfer(int index){
	Mutex::Autolock _l(mLock);
	mIndex = index;
	mDataTransfer.signal();
}
*/

void VideoShare::threadLoop_run(){
	ALOGE("vaylb_test-->VideoShare::threadLoop_run.");
	run("VideoShareSlave", PRIORITY_URGENT_DISPLAY);
}

void VideoShare::threadLoop_exit(){
	ALOGE("vaylb_test-->close VideoShare threadloop.");
	close(mClientSocketFd);
	close(mServerSocketFd);
	this->requestExit();
	this->requestExitAndWait();
}


}; // namespace android
